function conv_labels = convolve_events(lbl_ons, lbl_dur, TR_length, TR_total)

%
% CONV_LABELS = CONVOLVE_LABELS(ONSETS, DURATIONS, TR_LENGTH, TR_TOTAL, ...
% PRECISION)
%
% CONVOLVE_LABELS takes class label onset and duration vectors and convolves them
% with the standard HRF provided by SPM 5.
%
% LBL_ONS is a vector containing the label onsets in seconds.
%
% LBL_DUR is a vector or a single number containing the label durations in seconds.
%
% (Note: These two vectors must be of the same size!)
%
% TR_LENGTH: in seconds.
%
% TR_TOTAL: number of TRs.
%
% PRECISION: upsampling factor, i.e. 10 would mean that each element in the
% upsampled vector represents a tenth of a second. The larger this value
% the slower the convolution.
%
% CONV_LABELS is a vector with the number of its elements equaling the number of
% TRs in the run. It contains the convolved label values generated by the
% function.
%
% contact: ban...@students.uni-marburg.de, adapted by Qiu Han 16/01/2023

precision = 16; % the sampling fate per secs, a random number


if length(lbl_dur) ==1
    lbl_dur = lbl_dur * ones(size(lbl_ons));
elseif length(lbl_dur) ~= length(lbl_ons)
    error('Label duration should be a single value or a vectorwith the same size of label onsets.')
end

% multiply onsets and durations by precision
lbl_ons = ceil(lbl_ons*precision);
lbl_dur = ceil(lbl_dur*precision);

lbl_off = lbl_ons + lbl_dur;

% create zero vector for the entire run with each element corresponding to
% 1/precision of a second. (this has to be downsampled later; therefore ...
% the suffix 'up')
labels_up = zeros(1, TR_length * TR_total * precision);

% create_unconvolved labels
for i = 1:length(lbl_ons)
labels_up(lbl_ons(i) : lbl_off(i)) = 1;
end


% Defining convolution kernel:
% temporal resolution of both functions must be the same for convolution.
p = [6 16 1 1 6 0 32]; % default, see help spm_hrf
[hrf,~] = spm_hrf(TR_length,p, precision); % get a hrf of 32 seconds


hrf_up = interp1(1:length(hrf),hrf, 1:1/precision:length(hrf), 'pchip');


labels_up_conv = conv(labels_up, hrf_up);


% we can ignore the last part of the labels that is added by the
% convolution
labels_up_conv = labels_up_conv(1, 1:length(labels_up));


% downsampling: the new vector will have as many entries as there are TRs
% in the run. Each element represents the middle of each TR time bin.

conv_labels = downsample(labels_up_conv, TR_length * precision, floor(TR_length * precision * 0.5));